{
  "openapi": "3.0.1",
  "info": {
    "title": "task12_api",
    "version": "2025-02-23T09:09:41Z"
  },
  "servers": [
    {
      "url": "https://z0rw4yfqw4.execute-api.eu-central-1.amazonaws.com/{basePath}",
      "variables": {
        "basePath": {
          "default": "api"
        }
      }
    }
  ],
  "paths": {
    "/reservations": {
      "get": {
        "summary": "Returns list of reservations as specified in the response body",
        "description": "Fetches all reservations",
        "responses": {
          "200": {
            "description": "Successful retrieval",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          }
        },
        "security": [
          {
            "task11_cognito_authorizer": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      },
      "post": {
        "summary": "Reserve a table",
        "description": "Creates a reservation ensuring no overlap",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reservation successfully created",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          }
        },
        "security": [
          {
            "task11_cognito_authorizer": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      }
    },
    "/tables": {
      "get": {
        "summary": "Returns list of tables",
        "description": "Returns list of tables",
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TablesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "task11_cognito_authorizer": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      },
      "post": {
        "summary": "Creates table",
        "description": "Creates table",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Table"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            }
          }
        },
        "security": [
          {
            "task11_cognito_authorizer": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      }
    },
    "/signin": {
      "post": {
        "summary": "Sign in",
        "description": "Sign in",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigninRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigninResponse"
                }
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      }
    },
    "/signup": {
      "post": {
        "summary": "Sign up",
        "description": "Sign up",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        },
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          },
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      }
    },
    "/tables/{tableId}": {
      "get": {
        "summary": "Get table details",
        "description": "Returns details of a specific table by ID",
        "parameters": [
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            }
          },
          "404": {
            "description": "Table not found"
          }
        },
        "security": [
          {
            "task11_cognito_authorizer": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "httpMethod": "POST",
          "uri": "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:905418349556:function:api_handler/invocations",
          "responses": {
            "default": {
              "statusCode": "200",
              "responseParameters": { }
            }
          },
          "passthroughBehavior": "when_no_match",
          "type": "aws_proxy"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SignupRequest": {
        "type": "object",
        "description": "User signup request containing personal details and credentials.",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User's first name.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User's last name.",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address. Must be a valid email format.",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "description": "User's password. Must be at least 12 characters, alphanumeric, and include at least one of '$%^*-_'.",
            "example": "SecurePass123$"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "password"
        ]
      },
      "SigninRequest": {
        "type": "object",
        "description": "User signin request containing email and password.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address. Must be a valid email format.",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User's password. Must be at least 12 characters long, alphanumeric, and contain at least one of '$%^*'.",
            "example": "MySecurePass123$"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "SigninResponse": {
        "type": "object",
        "description": "Response after a successful user signin.",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token for authentication.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "accessToken"
        ]
      },
      "Reservation": {
        "type": "object",
        "description": "Represents a single reservation entry.",
        "properties": {
          "tableNumber": {
            "type": "integer",
            "description": "Number of the reserved table.",
            "example": 5
          },
          "clientName": {
            "type": "string",
            "description": "Name of the client making the reservation.",
            "example": "John Doe"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Client's contact phone number.",
            "example": "+1234567890"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Reservation date in YYYY-MM-DD format.",
            "example": "2025-03-15"
          },
          "slotTimeStart": {
            "type": "string",
            "pattern": "^([01]\\d|2[0-3]):([0-5]\\d)$",
            "description": "Start time of the reservation slot in HH:MM format.",
            "example": "13:00"
          },
          "slotTimeEnd": {
            "type": "string",
            "pattern": "^([01]\\d|2[0-3]):([0-5]\\d)$",
            "description": "End time of the reservation slot in HH:MM format.",
            "example": "15:00"
          }
        },
        "required": [
          "tableNumber",
          "clientName",
          "phoneNumber",
          "date",
          "slotTimeStart",
          "slotTimeEnd"
        ]
      },
      "ReservationRequest": {
        "type": "object",
        "description": "Request payload for creating a new reservation.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Reservation"
          }
        ]
      },
      "ReservationsResponse": {
        "type": "object",
        "description": "Response containing a list of reservations.",
        "properties": {
          "reservations": {
            "type": "array",
            "description": "List of reservations.",
            "items": {
              "$ref": "#/components/schemas/Reservation"
            }
          }
        },
        "required": [
          "reservations"
        ]
      },
      "Table": {
        "type": "object",
        "description": "Represents a restaurant table with seating capacity and booking conditions.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the table."
          },
          "number": {
            "type": "integer",
            "description": "Table number."
          },
          "places": {
            "type": "integer",
            "description": "Number of seats available at the table."
          },
          "isVip": {
            "type": "boolean",
            "description": "Indicates if the table is in the VIP section."
          },
          "minOrder": {
            "type": "integer",
            "description": "Optional deposit required to book the table.",
            "nullable": true
          }
        },
        "required": [
          "id",
          "number",
          "places",
          "isVip"
        ]
      },
      "TablesResponse": {
        "type": "object",
        "description": "Response containing a list of tables available in the restaurant.",
        "properties": {
          "tables": {
            "type": "array",
            "description": "List of tables available in the restaurant.",
            "items": {
              "$ref": "#/components/schemas/Table"
            }
          }
        },
        "required": [
          "tables"
        ]
      },
      "BadRequestError": {
        "type": "object",
        "description": "400 Bad Request - The request was invalid or cannot be processed.",
        "properties": {}
      },
      "Empty": {
        "title": "Empty Schema",
        "type": "object"
      }
    },
    "securitySchemes": {
      "task11_cognito_authorizer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "x-amazon-apigateway-authtype": "cognito_user_pools",
        "x-amazon-apigateway-authorizer": {
          "x-syndicate-cognito-userpool-names": [
            "${booking_userpool}"
          ],
          "type": "cognito_user_pools"
        }
      }
    }
  },
  "x-syndicate-openapi-tags": {
    "run_id": "SEP_GL_7",
    "run_type": "stm",
    "type": "user",
    "user_id": "7e60a31c"
  }
}